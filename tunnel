-- Dar Tunneler by Darganis
-- version: 1.1.3 2/25/2014

local m = dagsAPI.Move.new()
local a = dagsAPI.Action.new()
local u = dagsAPI.Utils.new()
local q = dagsAPI.Queue.new(0)

local params = { ... }

use_enderchest = false

if #params == 3 then

  height  = tonumber(params[1])
  width   = tonumber(params[2])
  length  = tonumber(params[3])

else

  term.clear()
  term.setCursorPos(1,1)
  term.write("Height of tunnel? ")
  height = tonumber(read())

  term.clear()
  term.setCursorPos(1,1)
  term.write("Width of tunnel? ")
  width = tonumber(read())

  term.clear()
  term.setCursorPos(1,1)
  term.write("Length of tunnel? ")
  length = tonumber(read())

end

skip_slots = {}

use_enderchest = false
ec_in_slot = 16

term.clear()
term.setCursorPos(1,1)
print("Use EnderChest [y|N]? ")
print("You must have an enderchest in slot 16 for this to work.")
term.setCursorPos(23,1)
input = read()
if input.upper(input) == "Y" then
  term.clear()
  term.setCursorPos(1,1)
  print("Using Ender Chest!")
  sleep(0.5)
  use_enderchest = true
  table.insert(skip_slots, ec_in_slot)
end

do_place_torches = false

term.clear()
term.setCursorPos(1,1)
print("Place torches [y|N]? ")
print("You must have torches in slot 15 for this to work.")
term.setCursorPos(21,1)
input = read()
if input.upper(input) == "Y" then
  term.clear()
  term.setCursorPos(1,1)
  do_place_torches = true
  table.insert(skip_slots, 15)
end


term.clear()

function refuel()
  if turtle.getFuelLevel() < 5 then
    print("Refueling...")
    shell.run("refuel", "5")
  end
end

function upUnlimited()
  local curHeight = 0
  repeat
    refuel()
    up, count = m.up(1,true)
    if up then
      curHeight = curHeight + 1
    end
  until turtle.detectUp() == false or not up
  refuel()
  m.down(curHeight,true)
end

function upUntil( num )
  local lnum = num-1
  refuel()
  if num == 1 then
    a.digUp()
  else
    up, count = m.up(lnum,true)
    a.digUp()
    m.down(count,true)
  end
end

function pillar()
  local curHeight = 0
  a.digFront()
  curHeight = curHeight + 1
  m.forward(1)
  a.digDown()
  curHeight = curHeight + 1
  if height == 0 then
    upUnlimited()
  else
    upUntil(height-curHeight)
  end
  if use_enderchest and u.invFull() then
    a.emptyInvIntoEnderchest(ec_in_slot, skip_slots)
  end
end

function row(width)
  local curWidth = 0
  while curWidth < width do
    pillar()
    curWidth = curWidth + 1
  end
end

function placeTorch( slot )
  if turtle.getItemCount(slot) > 0 then
    m.turn("right",1)
    a.place(slot)
    turtle.select(1)
    m.turn("left",1)
  end
end

function tunnel()
  local side = ""
  refuel()
  if turtle.getFuelLevel() == 0 then
    print("I am out of fuel. Please give me fuel and try again.")
    return
  end
  for i=1,length do
    if i == 1 then
      m.up(1)
      pillar()
      m.turn("right",1)
      row(width-1)
    else
      m.turn(getSide(i),1)
      pillar()
      m.turn(getSide(i),1)
      row(width-1)
      if do_place_torches and getSide(i) == "right" and ( math.fmod(i,6) == 0 or math.fmod(i,6) == 1 ) then
        placeTorch(15)
      end
    end
    side = getSide(i)
  end
  returnToStart(side)
end

-- this is supposed to return the side to turn to
function getSide( index )
  local mod = math.fmod(index,2)
  if mod == 1 then
    return "right"
  else
    return "left"
  end
end

function returnToStart( side )
  if side == "left" then
    m.turn("left", 1)
  else
    m.turn("right", 2)
    m.forward(width-1)
    m.turn("left", 1)
  end
  m.forward(length)
  m.down(1)
  print("Done!")
end

-- pause to close screen
sleep(2)
tunnel()