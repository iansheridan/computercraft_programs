-- Dar Quarry by Darganis
-- version: 0.0.2 9/3/2012

-- TODO: convert to use GPS

local m = dagsAPI.Move.new()
local a = dagsAPI.Action.new()
local u = dagsAPI.Utils.new()

local params = { ... }

term.clear()
term.setCursorPos(1,1)

if #params == 1 then

  length  = tonumber(params[1])

else

  term.write("Diameter of quarry? ")
  length = tonumber(read())

end

-- show Cords for debugging
showCords = false
-- set the width to length
width = length
-- Coordinates
curCords = {}
curCords.xcord = 0
curCords.ycord = 0
curCords.zcord = 0
curCords.direction = 1
savedCords = {}
savedCords.xcord = 0
savedCords.ycord = 0
savedCords.zcord = 0
savedCords.direction = 1

print("")

function refuel()
  local x,y,z = curCords.xcord, math.abs(curCords.ycord), curCords.zcord
  local fuelNeeded = x+y+z + x+y+z + 4
  if u.needsFuel(fuelNeeded) then
    print("Refueling from inventory...")
    for i=1,16 do
      if u.refuel(i,10) then
        break
      end
    end
    if u.needsFuel(fuelNeeded) then
      print("returning to start for refueling...")
      returnToStart()
      print("waiting for fuel...")
      repeat
        for i=1,16 do
          if u.refuel(i,10) then
            break
          end
        end
      until not u.needsFuel(fuelNeeded)
      goTo( savedCords.xcord, savedCords.ycord, savedCords.zcord, savedCords.direction, true )
    end
  end
end

function pillar()
  local output1 = true
  local output2 = true
  local output3 = true
  refuel()
  doDropOff()
  output1 = goForward(1)
  output2 = doDigUp()
  output3 = doDigDown()
  print( "pillar: output 1,2,3="..tostring(output1)..","..tostring(output2)..","..tostring(output3) )
  return output1
end

function row(width)
  local curWidth = 0
  local output = true
  print("digging "..tostring(width).." pillars for row...")
  repeat
    output = pillar()
    curWidth = curWidth + 1
  until (not output) or curWidth == width
  return output
end

function level(rows)
  local side
  local output1 = false
  local output2 = false
  local curLength = 0
  local curWidth = 0
  -- repeat levels till can move down
  print("digging "..tostring(rows).." rows for level...")
  for i=1,rows do
    if i%2 == 0 then
      side = 4
    else
      side = 2
    end
    if i == 1 then
      turnToDir(2)
      output1 = true -- no pillar
      output2 = row(width-1)
    else
      turnToDir(1)
      output1 = pillar()
      turnToDir(side)
      output2 = row(width-1)
    end
    if not output2 or not output1 then
      return false
    end
    curLength = curLength + 1
  end
  output3 = levelReturnToStart()
  print( "level: output 1,2,3="..tostring(output1)..","..tostring(output2)..","..tostring(output3) )
  return ( output1 and output2 and output3 )
end

function goNextLevel()
  output = goDown(2)
  doDigDown()
  return output
end

function levelReturnToStart()
  local output1 = true
  local output2 = false
  local output3 = false
  if curCords.xcord == 0 then
    turnToDir(3)
  else
    turnToDir(4)
    output1 = goForward(width-1)
    turnToDir(3)
  end
  output2 = goForward(length-1)
  output3 = goDown(1)
  print( "levelRTS: output 1,2,3="..tostring(output1)..","..tostring(output2)..","..tostring(output3) )
  return ( output1 and output2 and output3 )
end

function returnToStart()
  print("returning to start...")
  saveCords()
  goTo( 0, 0, 0, 3, true )
end

function doDropOff()
  local isFull
  local count
  -- test inventory
  for i=1,16 do
    turtle.select(i)
    count = turtle.getItemCount(i)
    if count == 0 then
      isFull = false
      break
    else
      isFull = true
    end
  end
  turtle.select(1)
  -- goTo start if isFull and come back
  if isFull then
    print("Inventory full, dropping off items...")
    returnToStart()
    emptyInvemtory()
    goTo( savedCords.xcord, savedCords.ycord, savedCords.zcord, savedCords.direction, true )
  end
end

function emptyInvemtory()
  -- face chest
  turnToDir(3)
  -- drop off items
  for i=1,16 do
    turtle.select(i)
    turtle.drop()
  end
  -- reset selected slot to 1
  turtle.select(1)
end

function quarry()
  local output1 = false
  local output2 = false
  refuel()
  if turtle.getFuelLevel() == 0 then
    print("I am out of fuel. Please give me fuel and try again.")
    return
  end
  goNextLevel()
  while true do
    output1 = level(length)
    if output1 then
      output2 = goNextLevel()
    end
    print("quarry: output 1,2="..tostring(output1)..","..tostring(output2))
    if not output1 or not output2 then
      break
    end
  end
  print("returning to start...")
  returnToStart()
  emptyInvemtory()
end

-- Utility Functions

function saveCords()
  savedCords.xcord = curCords.xcord
  savedCords.ycord = curCords.ycord
  savedCords.zcord = curCords.zcord
  savedCords.direction = curCords.direction
end

function goTo( x, y, z, d, dig )
  local d = d or 1
  local dig = dig or false
  -- deal with Y cord
  disty = math.abs( y - curCords.ycord )
  if (y < curCords.ycord) then
    goDown(disty, dig)
  elseif (y > curCords.ycord) then
    goUp(disty, dig)
  end
  -- deal with X cord
  distx = x - curCords.xcord
  if (x > curCords.xcord) then
    turnToDir(2)
  else
    turnToDir(4)
  end
  distx = math.abs(distx)
  goForward(distx, dig)
  -- deal with Z cord
  distz = z - curCords.zcord
  if (z > curCords.zcord) then
    turnToDir(1)
  else
    turnToDir(3)
  end
  distz = math.abs(distz)
  goForward(distz, dig)
  -- deal with direction
  turnToDir(d)
end

function goForward( times )
  local moved, count = m.forward(times, true)
  if moved or count > 0 then
    if curCords.direction == 1 then
      curCords.zcord = curCords.zcord + count
    elseif curCords.direction == 2 then
      curCords.xcord = curCords.xcord + count
    elseif curCords.direction == 3 then
      curCords.zcord = curCords.zcord - count
    elseif curCords.direction == 4 then
      curCords.xcord = curCords.xcord - count
    end
  end
  printStats()
  return moved
end

function goDown( times )
  local moved, count = m.down(times, true)
  if moved or count > 0 then
    curCords.ycord = curCords.ycord - count
  end
  printStats()
  return moved
end

function goUp( times )
  local moved, count = m.up(times, true)
  if moved or count > 0 then
    curCords.ycord = curCords.ycord + count
  end
  printStats()
  return moved
end

function doDigUp()
  return a.digUp()
end

function doDigDown()
  return a.digDown()
end

function doDigFront()
  return a.digFront()
end

function turnToDir( toDir )
  local times = math.abs(curCords.direction - toDir)
  local turnTo
  if curCords.direction < toDir and times < 3 then
    turnTo = "right"
  elseif curCords.direction > toDir and times == 3 then
    turnTo = "right"
  else
    turnTo = "left"
  end
  if times == 3 then
    m.turn(turnTo, 1)
  else
    m.turn(turnTo, times)
  end
  curCords.direction = toDir
  printStats()
end

function printStats()
  if showCords then
    term.clear()
    term.setCursorPos(1,1)
    print("x,y,z,d = "..curCords.xcord..","..curCords.ycord..","..curCords.zcord..","..curCords.direction)
    print("saved x,y,z,d = "..savedCords.xcord..","..savedCords.ycord..","..savedCords.zcord..","..savedCords.direction)
    term.setCursorPos(1,3)
  end
end

-- pause to close screen
sleep(2)
quarry()